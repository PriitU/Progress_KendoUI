module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1023);
	module.exports = __webpack_require__(1023);


/***/ },

/***/ 3:
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },

/***/ 507:
/***/ function(module, exports) {

	module.exports = require("../kendo.core");

/***/ },

/***/ 1023:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(507) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	(function(kendo) {
	    if (kendo.support.browser.msie && kendo.support.browser.version < 9) {
	        return;
	    }

	    var $ = kendo.jQuery;

	    var Property = kendo.Class.extend({
	        init: function(list) {
	            this.list = list;
	        },

	        get: function(index) {
	            return this.parse(this.list.value(index, index));
	        },

	        set: function(start, end, value) {
	            if (value === undefined) {
	                value = end;
	                end = start;
	            }

	            this.list.value(start, end, value);
	        },

	        parse: function(value) {
	            return value;
	        },

	        copy: function(start, end, dst) {
	            this.list.copy(start, end, dst);
	        },

	        iterator: function(start, end) {
	            return this.list.iterator(start, end);
	        }
	    });

	    var JsonProperty = Property.extend({
	        set: function(start, end, value) {
	            this.list.value(start, end, JSON.stringify(value));
	        },

	        parse: function(value) {
	            return JSON.parse(value);
	        }
	    });

	    var ValueProperty = Property.extend({
	        init: function(values, formats, validations) {
	            Property.prototype.init.call(this, values);

	            this.validations = validations;
	            this.formats = formats;
	        },

	        set: function(start, end, value) {
	            //TODO: RESET VALIDATION AS WELL?
	            if (value instanceof Date) {
	                value = kendo.spreadsheet.dateToNumber(value);
	                this.formats.value(start, end, toExcelFormat(kendo.culture().calendar.patterns.d));
	            }

	            this.list.value(start, end, value);
	        }
	    });

	    function toExcelFormat(format) {
	        return format.replace(/M/g, "m").replace(/'/g, '"').replace(/tt/, "am/pm");
	    }

	    kendo.spreadsheet.PropertyBag = kendo.Class.extend({
	        specs: [
	            { property: ValueProperty, name: "value", value: null, sortable: true, serializable: true, depends: "format" },
	            { property: Property, name: "format", value: null, sortable: true, serializable: true },
	            { property: Property, name: "formula", value: null, sortable: true, serializable: true },
	            { property: Property, name: "background", value: null, sortable: true, serializable: true },
	            { property: JsonProperty, name: "borderBottom", value: null, sortable: false, serializable: true },
	            { property: JsonProperty, name: "borderRight", value: null, sortable: false, serializable: true },
	            { property: JsonProperty, name: "borderLeft", value: null, sortable: false, serializable: true },
	            { property: JsonProperty, name: "borderTop", value: null, sortable: false, serializable: true },
	            { property: Property, name: "color", value: null, sortable: true, serializable: true },
	            { property: Property, name: "fontFamily", value: null, sortable: true, serializable: true },
	            { property: Property, name: "underline", value: null, sortable: true, serializable: true },
	            { property: Property, name: "fontSize", value: null, sortable: true, serializable: true },
	            { property: Property, name: "italic", value: null, sortable: true, serializable: true },
	            { property: Property, name: "bold", value: null, sortable: true, serializable: true },
	            { property: Property, name: "textAlign", value: null, sortable: true, serializable: true },
	            { property: Property, name: "verticalAlign", value: null, sortable: true, serializable: true },
	            { property: Property, name: "wrap", value: null, sortable: true, serializable: true },
	            { property: Property, name: "validation", value: null, sortable: false, serializable: true },
	            { property: Property, name: "enable", value: null, sortable: false, serializable: true },
	            { property: Property, name: "link", value: null, sortable: false, serializable: true },
	            { property: Property, name: "editor", value: null, sortable: false, serializable: true }
	        ],

	        init: function(cellCount, defaultValues) {
	            defaultValues = defaultValues || {};

	            this.properties = {};

	            this.lists = {};

	            this.specs.forEach(function(spec) {
	                var value = defaultValues[spec.name] !== undefined ? defaultValues[spec.name] : spec.value;

	               this.lists[spec.name] = new kendo.spreadsheet.SparseRangeList(0, cellCount, value);
	            }, this);

	            this.specs.forEach(function(spec) {
	                this.properties[spec.name] = new spec.property(this.lists[spec.name], this.lists[spec.depends]);
	            }, this);
	        },

	        getState: function() {
	            var state = {};

	            this.specs.forEach(function(spec) {
	               state[spec.name] = this.lists[spec.name].getState();
	            }, this);

	            return state;
	        },

	        setState: function(state) {
	            this.specs.forEach(function(spec) {
	                this.lists[spec.name].setState(state[spec.name]);
	            }, this);
	        },

	        get: function(name, index) {
	            if (index === undefined) {
	                return this.lists[name];
	            }

	            return this.properties[name].get(index);
	        },

	        set: function(name, start, end, value) {
	            this.properties[name].set(start, end, value);
	        },

	        fromJSON: function(index, value) {
	            for (var si = 0; si < this.specs.length; si++) {
	                var spec = this.specs[si];

	                if (spec.serializable) {
	                    if (value[spec.name] !== undefined) {
	                        this.set(spec.name, index, index, value[spec.name], false);
	                    }
	                }
	            }
	        },

	        copy: function(sourceStart, sourceEnd, targetStart) {
	            this.specs.forEach(function(spec) {
	                this.properties[spec.name].copy(sourceStart, sourceEnd, targetStart);
	            }, this);
	        },

	        iterator: function(name, start, end) {
	            return this.properties[name].iterator(start, end);
	        },

	        sortable: function() {
	            return this.specs.filter(function(spec) { return spec.sortable; })
	                              .map(function(spec) {
	                                return this.lists[spec.name];
	                              }, this);
	        },

	        iterators: function(start, end) {
	            var specs = this.specs.filter(function(spec) {
	                return spec.serializable;
	            });

	            return specs.map(function(spec) {
	                var iterator = this.iterator(spec.name, start, end);

	                return {
	                    name: spec.name,
	                    value: spec.value,
	                    at: function (index) {
	                        return spec.property.fn.parse(iterator.at(index));
	                    }
	                };
	            }, this);
	        },

	        forEach: function(start, end, callback) {
	            var iterators = this.iterators(start, end);

	            for (var index = start; index <= end; index++) {
	                var values = {};

	                for (var i = 0; i < iterators.length; i++) {
	                    var iterator = iterators[i];
	                    var value = iterator.at(index);

	                    if (value !== iterator.value) {
	                        values[iterator.name] = value;
	                    }
	                }

	                callback(values);
	            }
	        },

	        forEachProperty: function(callback) {
	            for (var name in this.properties) {
	                callback(this.properties[name]);
	            }
	        }
	    });

	    kendo.spreadsheet.ALL_PROPERTIES = $.map(kendo.spreadsheet.PropertyBag.prototype.specs, function(spec) {
	        return spec.name;
	    });

	})(window.kendo);

	}, __webpack_require__(3));


/***/ }

/******/ });